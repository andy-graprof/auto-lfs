#!/usr/bin/python

import os

def make_node(module):
  path = module.params['path']
  mode = module.params['mode']
  type = module.params['type']
  major = module.params['major']
  minor = module.params['minor']

  binary = module.get_bin_path('mknod', True)
  cmd = [ binary ]
  if mode is not None:
    cmd += [ '-m', mode ]
  cmd += [ path, type ]
  if major is not None:
    cmd += major
  if minor is not None:
    cmd += minor
  return module.run_command(cmd, check_rc=True)

def check_node(module):
  path = module.params['path']
  mode = module.params['mode']
  type = module.params['type']
  major = module.params['major']
  minor = module.params['minor']

  binary = module.get_bin_path('stat', True)
  cmd = [ binary, '--format', '%a %t %T %F', path ]
  (rc, out, err) = module.run_command(cmd)

  if rc != 0:
    return make_node(module)

  info = out.split(None, 3)

  if info[1] != major or info[2] != minor or info[3][0] != type:
    binary = module.get_bin_path('rm', True)
    cmd = [ binary, path ]
    module.run_command(cmd, check_rc=True)
    return make_node(module)

  if int(info[0], 8) != int(mode, 8):
    binary = module.get_bin_path('chmod', True)
    cmd = [ binary, mode, path ]
    return module.run_command(cmd, check_rc=True)

  return (None, "", "")

def main():
  module = AnsibleModule(
    argument_spec = dict(
      path=dict(required=True, type='str'),
      mode=dict(default=None, type='str'),
      type=dict(required=True, type='str'),
      major=dict(default=None, type='str'),
      minor=dict(default=None, type='str'),
    ),
    supports_check_mode=False
  )

  (rc, out, err) = check_node(module)

  result = { }
  if rc is None:
    result['changed'] = False
  else:
    result['changed'] = True

  result['stdout'] = out
  result['stderr'] = err

  module.exit_json(**result)

from ansible.module_utils.basic import *
main()
